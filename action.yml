name: Poe Slash Command Processor
description: |
  Executes a PoeThePoet command. Designed to be used in slash commands, and can auto-commit changes back to the PR's branch.
branding:
  icon: check-circle
  color: blue


inputs:
  command:
    description: "Poe command to run. If not provided, we'll infer the command from the body of the specified comment-id."
    required: false
  pr:
    description: "PR Number"
    required: false
  comment-id:
    description: "Comment ID (optional, for reply chaining)"
    required: false
  github-token:
    description: "GitHub Token. Required for CI to run after commits are pushed."
    required: false
  no-commit:
    description: "Disable auto-commit step"
    required: false
    default: "false"
  start-message:
    description: "Message to include in the start comment"
    required: false
    default: ""
  success-message:
    description: "Message to include in the success comment"
    required: false
    default: ""
  failure-message:
    description: "Message to include in the failure comment"
    required: false
    default: ""

runs:
  using: "composite"
  steps:

    - name: Resolve poe command
      id: resolve-command
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        set -euo pipefail
        if [[ "${{ inputs.command }}" ]]; then
          # Command was provided explicitly
          echo "Using command from input: ${{ inputs.command }}"
          command="${{ inputs.command }}"
        # Command was not provided, so we need to infer it from the comment body
        elif [[ -z "${{ inputs.comment-id }}" ]]; then
          echo "No 'command' or 'comment-id' input was provided. At least one is required."
          exit 1
        else
          COMMENT_JSON=$(gh api repos/${{ github.repository }}/issues/comments/${{ inputs.comment-id }})
          echo "::group::👀 Debug Comment JSON"
          echo $COMMENT_JSON | jq
          echo "::endgroup::"
          command=$(echo $COMMENT_JSON | jq -r .body)
          if [[ -z "$command" ]]; then
            echo "No command found in comment body."
            exit 1
          fi
          echo "Using command from comment body: $command"
        fi

        # Take just the first line of the command
        command=$(echo "$command" | head -n 1)
        # Remove 'poe' or '/poe' prefix from command
        command=$(echo "$command" | sed -E '1s/^(\/?poe )?//')
        # Remove leading and trailing whitespace
        command=$(echo "$command" | xargs)

        echo "Resolved command: ${command}"
        echo command="$command" >> $GITHUB_OUTPUT

    - name: Get PR info
      if: inputs.pr
      id: pr-info
      shell: bash
      run: |
        PR_JSON=$(gh api repos/${{ github.repository }}/pulls/${{ inputs.pr }})
        echo "::group::👀 Debug PR JSON"
        echo $PR_JSON | jq
        echo $PR_JSON | jq -r .head.repo.full_name
        echo $PR_JSON | jq -r .head.ref
        echo "::endgroup::"
        echo repo=$(echo $PR_JSON | jq -r .head.repo.full_name) >> $GITHUB_OUTPUT
        echo branch=$(echo $PR_JSON | jq -r .head.ref) >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Generate run link
      id: vars
      shell: bash
      run: echo "run-url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$GITHUB_OUTPUT"

    - name: Post job start comment
      if: inputs.pr || inputs.comment-id
      uses: peter-evans/create-or-update-comment@v4
      id: comment-start
      with:
        comment-id: ${{ inputs.comment-id }}
        issue-number: ${{ inputs.pr }}
        body: |
          > ${{ inputs.start-message || ('**Running `poe' + steps.resolve-command.outputs.command + '`...**') }}
          >
          > [Link to job logs.](${{ steps.vars.outputs.run-url }})

    - name: Checkout PR
      if: inputs.pr
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.pr-info.outputs.branch }}
        submodules: true  # Initialize submodules if needed
        repository: ${{ steps.pr-info.outputs.repo }}
        token: ${{ inputs.github-token }}

    - name: Checkout default branch (no existing PR)
      if: "! inputs.pr"
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.pr-info.outputs.repo }}
        token: ${{ inputs.github-token }}

    - name: Fetch tool versions
      id: tool-versions
      continue-on-error: true
      uses: marocchino/tool-versions-action@v1

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        # Use the provided Python version or the default one
        python-version: ${{ steps.tool-versions.outputs.python || '3.11' }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        # Set up the provided version or the latest if not specified
        version: ${{ steps.tool-versions.outputs.uv || 'latest' }}
        # Use the provided Python version or the default one
        python-version: ${{ steps.tool-versions.outputs.python || '3.11' }}

    - name: Install Poetry
      uses: Gr1N/setup-poetry@v9
      with:
        # Set up the provided version or the latest if not specified
        poetry-version: ${{ steps.tool-versions.outputs.poetry || '' }}

    - name: Install poethepoet
      shell: bash
      # Currently, we just install the latest version of poethepoet.
      # This should be fine (for now) since Poe changes are generally
      # backward compatible.
      run: uv tool install poethepoet

    - name: Install dependencies
      shell: bash
      run: |
        poe install || echo "Failed 'poe install' or the task does not exist. Continuing..."

    - name: Print Pre-Run Marker
      # Pre-run and post-run markers just help the reader find the relevant
      # sections in the logs.
      shell: bash
      run: |
        # Printing Pre-Run Marker
        echo "------------------------------------"
        echo "------------------------------------"
        echo "-- Running Command: 'poe ${{ steps.resolve-command.outputs.command }}' --"
        echo "------------------------------------"
        echo "------------------------------------"

    - name: Run `poe ${{ steps.resolve-command.outputs.command }}`
      shell: bash
      run: |
        poe ${{ steps.resolve-command.outputs.command }}

    - name: Print Post-Run Marker
      if: always()
      shell: bash
      run: |
        # Printing Post-Run Marker
        echo "------------------------------------"
        echo "------------------------------------"
        echo "-- Execution Completed: 'poe ${{ steps.resolve-command.outputs.command }}' --"
        echo "------------------------------------"
        echo "------------------------------------"

    - name: Auto commit changes
      id: auto-commit
      uses: stefanzweifel/git-auto-commit-action@v5
      if: >
        inputs.no-commit != 'true'
        && inputs.pr
      with:
        commit_message: "Auto-committed changes from Poe command `${{ steps.resolve-command.outputs.command }}`"
        commit_user_name: Octavia Squidington III
        commit_user_email: octavia-squidington-iii@users.noreply.github.com

    - name: Append success comment
      if: >
        steps.comment-start.outputs.comment-id
        && steps.auto-commit.outputs.changes_detected == 'true'
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.comment-start.outputs.comment-id }}
        reactions: hooray
        body: >
          🤖 Auto-commit successful: ${{ steps.auto-commit.outputs.commit_hash }}

    - name: Append no-op comment
      if: >
        steps.comment-start.outputs.comment-id
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.comment-start.outputs.comment-id }}
        reactions: "+1"
        body: |
          ${{ inputs.success-message || (' 🟦  Poe command `' + steps.resolve-command.outputs.command + '` completed successfully.') }}

    - name: Append failure comment
      if: failure() && steps.comment-start.outputs.comment-id
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.comment-start.outputs.comment-id }}
        reactions: confused
        body: >
          ${{ inputs.failure-message || ('❌ Poe command `' + steps.resolve-command.outputs.command + '` failed. Please inspect the logs.') }}

    # Create a new PR if no PR was provided

    - name: Create Pull Request
      if: >
        inputs.no-commit != 'true'
        && ! inputs.pr
      id: create-pr
      uses: peter-evans/create-pull-request@v7
      with:
        title: "Auto-generated PR: `poe ${{ steps.resolve-command.outputs.command }}`"
        commit-message: "Auto-committed changes from `poe ${{ steps.resolve-command.outputs.command }}`"
        body: |
          ## Output of `poe ${{ steps.resolve-command.outputs.command }}`

          This PR was automatically generated by the Poe GitHub Action.
          It contains the output of the command `${{ steps.resolve-command.outputs.command }}`.
          Please review the changes and consider merging them if they are acceptable.

          [Link to job logs.][1]

          [1]: ${{ steps.vars.outputs.run-url }}
        branch: auto-commit/poe-processor-${{ github.run_id }}
        draft: true
        commit-user-name: Octavia Squidington III
        commit-user-email: octavia-squidington-iii@users.noreply.github.com
        token: ${{ inputs.github-token }}

    - name: Append PR link to comment
      if: >
        steps.comment-start.outputs.comment-id
        && inputs.no-commit != 'true'
        && ! inputs.pr
        && steps.create-pr.outputs.pull-request-url
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.comment-start.outputs.comment-id }}
        body: |
          >
          > 🚀 PR Created:
          >
          > - ${{ steps.create-pr.outputs.pull-request-url }}
